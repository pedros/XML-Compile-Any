#!/usr/bin/env perl
# -*- mode: cperl; -*-
use strict;
use warnings;
use Data::Dumper; $Data::Dumper::Sortkeys = 1;

use XML::Compile::Any;

use XML::LibXML;

my $oozie = XML::Compile::Any->new(glob 't/xsd/*.xsd');

# TODO: this will be dynamic
# my $element = XML::Compile::Util::pack_type('uri:oozie:coordinator:0.1', 'coordinator-app');
my $element = XML::Compile::Util::pack_type('uri:oozie:workflow:0.5', 'workflow-app');

# XML reader
my $reader = $oozie->compile(
    READER => $element,
    any_element => $oozie->make_any_element_reader_handler
);
my $wf = $reader->('/home/psilva/workflow.xml');

# # YAML reader
# my $reader = $oozie->compile(
#     YAMLReader => $element,
#     any_element => $oozie->make_any_element_foreign_reader_handler,
# );
# my $wf = $reader->('./workflow.yaml');

# # JSON reader
# my $reader = $oozie->compile(
#     JSONReader => $element,
#     any_element => $oozie->make_any_element_foreign_reader_handler,
# );
# my $wf = $reader->('./workflow.json');

#print Dumper $wf;exit;

# XML writer
my $writer = $oozie->compile(
    WRITER => $element,
    any_element => $oozie->make_any_element_writer_handler,
    use_default_namespace => 1,
);
my $doc = XML::LibXML::Document->new('1.0', 'UTF-8');
my $xml = $writer->($doc, $wf);
$doc->setDocumentElement($xml);
print $doc->serialize(1);

# # YAML writer
# my $writer = $oozie->compile(
#     YAMLWriter => $element,
#     any_element => $oozie->make_any_element_foreign_writer_handler,
#     use_default_namespace => 1,
# );
# my $yaml = $writer->($wf);
# print $yaml;

# # JSON writer
# my $writer = $oozie->compile(
#     JSONWriter => $element,
#     any_element => $oozie->make_any_element_foreign_writer_handler,
#     use_default_namespace => 1,
# );
# my $json = $writer->($wf);
# print $json;
